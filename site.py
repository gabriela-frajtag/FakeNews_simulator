import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation  # Para anima√ß√£o
import time

# Modelo de Ising modificado para fake news
class FakeNewsIsingModel:
    def __init__(self, grid_size=20, steps_per_update=10, num_influencers=2, num_wise=3, temperature=2, fake_news_name="Fake News"):
        self.grid_size = grid_size
        self.steps_per_update = steps_per_update
        self.num_influencers = num_influencers
        self.num_wise = num_wise
        self.temperature = temperature
        self.fake_news_name = fake_news_name
        self.state = np.random.choice([-1, 0, 1], (grid_size, grid_size))
        self.influencers = self.generate_influencers()
        self.wise_people = self.generate_wise_people()
        self.credibility_history = []

    def generate_influencers(self):
        influencers = set()
        while len(influencers) < self.num_influencers:
            i, j = np.random.randint(0, self.grid_size, size=2)
            influencers.add((i, j))
        return influencers

    def generate_wise_people(self):
        wise_people = set()
        while len(wise_people) < self.num_wise:
            i, j = np.random.randint(0, self.grid_size, size=2)
            if (i, j) not in self.influencers:
                wise_people.add((i, j))
                self.state[i, j] = -1  # N√£o acredita na fake news
        return wise_people

    def get_neighbors(self, i, j, radius=1):
        neighbors = []
        for x in range(i - radius, i + radius + 1):
            for y in range(j - radius, j + radius + 1):
                if (x, y) != (i, j):
                    neighbors.append((x % self.grid_size, y % self.grid_size))
        return neighbors

    def energy_change(self, i, j, new_state):
        radius = 2 if (i, j) in self.influencers else 1
        neighbors = self.get_neighbors(i, j, radius)
        interaction_weight = 2 if (i, j) in self.influencers else 1
        old_energy = -interaction_weight * sum(self.state[i, j] * self.state[x, y] for x, y in neighbors)
        new_energy = -interaction_weight * sum(new_state * self.state[x, y] for x, y in neighbors)
        return new_energy - old_energy

    def update_state(self):
        for _ in range(self.steps_per_update):
            i, j = np.random.randint(0, self.grid_size, size=2)
            if (i, j) in self.wise_people:
                continue  # Ignora os s√°bios
            new_state = np.random.choice([-1, 0, 1])
            delta_e = self.energy_change(i, j, new_state)
            if delta_e < 0 or np.random.random() < np.exp(-delta_e / self.temperature):
                self.state[i, j] = new_state

    def calculate_credibility(self):
        credibility = np.mean(self.state)
        self.credibility_history.append(credibility)

    def plot_grid(self, iteration, ax):
        ax.imshow(self.state, cmap='RdYlGn', vmin=-1, vmax=1)
        for (i, j) in self.influencers:
            ax.text(j, i, "‚òÖ", ha='center', va='center', color="black", fontsize=10)
        for (i, j) in self.wise_people:
            ax.text(j, i, "üí°", ha='center', va='center', color="black", fontsize=10)  # S√≠mbolo de lampada para s√°bios
        ax.set_title(f"Itera√ß√£o: {iteration}")
        ax.grid(True, color="black", linewidth=0.5)
        ax.axis('off')

# Fun√ß√£o para animar o modelo
def animate(i, model, ax):
    model.update_state()
    model.calculate_credibility()
    ax.clear()  # Limpa o gr√°fico
    model.plot_grid(i, ax)  # Plota a nova grade

# Fun√ß√£o principal para a interface do Streamlit
def run_simulation():
    st.title("Simulador de Propaga√ß√£o de Fake News - Modelo de Ising")

    # Inputs do usu√°rio
    fake_news_name = st.text_input("Nome da Fake News", "Fake News")
    grid_size = st.slider("Tamanho da grade", min_value=10, max_value=50, value=20)
    num_influencers = st.slider("N√∫mero de Influenciadores", min_value=1, max_value=10, value=2)
    num_wise = st.slider("N√∫mero de S√°bios", min_value=1, max_value=10, value=3)
    temperature = st.slider("Temperatura", min_value=0.1, max_value=5.0, value=2.0)
    iterations = st.slider("N√∫mero de Itera√ß√µes", min_value=1, max_value=500, value=100)

    # Inicializar o modelo com os par√¢metros escolhidos
    model = FakeNewsIsingModel(
        grid_size=grid_size,
        num_influencers=num_influencers,
        num_wise=num_wise,
        temperature=temperature,
        fake_news_name=fake_news_name
    )

    # Bot√£o para iniciar a anima√ß√£o
    start_button = st.button("Iniciar Simula√ß√£o")

    if start_button:
        # Barra de progresso
        progress_bar = st.progress(0)
        # Criar o espa√ßo para exibir o gr√°fico animado
        placeholder = st.empty()

        # Criar o gr√°fico
        fig, ax = plt.subplots(figsize=(5, 5))
        ax.set_axis_off()  # Oculta os eixos

        # Anima√ß√£o
        for iteration in range(iterations):
            model.update_state()
            model.calculate_credibility()
            ax.clear()  # Limpa o gr√°fico
            model.plot_grid(iteration, ax)  # Plota a nova grade
            st.pyplot(fig)  # Exibe o gr√°fico
            st.line_chart(model.credibility_history)  # Exibe a credibilidade ao longo do tempo

            # Atualiza a barra de progresso
            progress_bar.progress((iteration + 1) / iterations)

            time.sleep(0.1)  # Intervalo de atualiza√ß√£o para dar tempo ao gr√°fico

        st.success("Simula√ß√£o conclu√≠da!")

if __name__ == "__main__":
    # Configura√ß√£o da interface com Streamlit
    st.set_page_config(page_title="Simula√ß√£o de Fake News", layout="wide")

    # Aba principal
    tab1, tab2 = st.tabs(["Simula√ß√£o", "Sobre"])

    with tab1:
        run_simulation()

    with tab2:
        st.header("Sobre o Modelo")
        st.markdown("""
        Este simulador utiliza uma vers√£o modificada do **Modelo de Ising**, tradicionalmente utilizado em f√≠sica para simular ferromagnetismo. 
        Foi desenvolvido por alunos do quarto semestre da Ilum Escola de Ci√™ncia.

        ### Modifica√ß√µes do modelo:
        - **Spins (-1, 0, 1)** representam:
          - `-1`: Pessoas que acreditam na fake news.
          - `0`: Pessoas neutras.
          - `1`: Pessoas que n√£o acreditam.
        - **Influenciadores (‚òÖ)** t√™m maior peso na influ√™ncia de vizinhos.
        - **S√°bios (üí°)** nunca acreditam na fake news.

        ### Par√¢metros ajust√°veis:
        - **Temperatura**: Controla a probabilidade de mudan√ßas de estado.
        - **Influenciadores e s√°bios**: Afetam a din√¢mica local do modelo.

        Ajustar os par√¢metros √© essencial para modelar a propaga√ß√£o de fake news de maneira mais personalizada. Por exemplo, os s√°bios podem ser vistos como espacialistas. Sendo assim, assuntos m√©dicos como vacinas ter√£o mais s√°bios que assuntos obscuros, como "pinguins extraterrestres que invadiram o planeta h√° duas eras geol√≥gicas atr√°s".  
        Sinta-se √† vontade para ajustar os par√¢metros e observar os efeitos na propaga√ß√£o de cren√ßas!
        """)
