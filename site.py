import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import time

# Modelo de Ising modificado para fake news
class FakeNewsIsingModel:
    def __init__(self, grid_size=20, steps_per_update=10, num_influencers=2, num_wise=3, temperature=2, fake_news_name="Fake News"):
        self.grid_size = grid_size
        self.steps_per_update = steps_per_update
        self.num_influencers = num_influencers
        self.num_wise = num_wise
        self.temperature = temperature
        self.fake_news_name = fake_news_name
        self.state = np.random.choice([-1, 0, 1], (grid_size, grid_size))
        self.influencers = self.generate_influencers()
        self.wise_people = self.generate_wise_people()
        self.credibility_history = []

    def generate_influencers(self):
        influencers = set()
        while len(influencers) < self.num_influencers:
            i, j = np.random.randint(0, self.grid_size, size=2)
            influencers.add((i, j))
        return influencers

    def generate_wise_people(self):
        wise_people = set()
        while len(wise_people) < self.num_wise:
            i, j = np.random.randint(0, self.grid_size, size=2)
            if (i, j) not in self.influencers:
                wise_people.add((i, j))
                self.state[i, j] = -1  # NÃ£o acredita na fake news
        return wise_people

    def get_neighbors(self, i, j, radius=1):
        neighbors = []
        for x in range(i - radius, i + radius + 1):
            for y in range(j - radius, j + radius + 1):
                if (x, y) != (i, j):
                    neighbors.append((x % self.grid_size, y % self.grid_size))
        return neighbors

    def energy_change(self, i, j, new_state):
        radius = 2 if (i, j) in self.influencers else 1
        neighbors = self.get_neighbors(i, j, radius)
        interaction_weight = 2 if (i, j) in self.influencers else 1
        old_energy = -interaction_weight * sum(self.state[i, j] * self.state[x, y] for x, y in neighbors)
        new_energy = -interaction_weight * sum(new_state * self.state[x, y] for x, y in neighbors)
        return new_energy - old_energy

    def update_state(self):
        for _ in range(self.steps_per_update):
            i, j = np.random.randint(0, self.grid_size, size=2)
            if (i, j) in self.wise_people:
                continue  # Ignora os sÃ¡bios
            new_state = np.random.choice([-1, 0, 1])
            delta_e = self.energy_change(i, j, new_state)
            if delta_e < 0 or np.random.random() < np.exp(-delta_e / self.temperature):
                self.state[i, j] = new_state

    def calculate_credibility(self):
        credibility = np.mean(self.state)
        self.credibility_history.append(credibility)

    def plot_grid(self, iteration, ax):
        ax.imshow(self.state, cmap='RdYlGn', vmin=-1, vmax=1)
        for (i, j) in self.influencers:
            ax.text(j, i, "â˜…", ha='center', va='center', color="black", fontsize=10)
        for (i, j) in self.wise_people:
            ax.text(j, i, "ðŸ’¡", ha='center', va='center', color="black", fontsize=10)  # SÃ­mbolo de lampada para sÃ¡bios
        ax.set_title(f"IteraÃ§Ã£o: {iteration} - {self.fake_news_name}")
        ax.grid(True, color="black", linewidth=0.5)
        ax.axis('off')

# FunÃ§Ã£o principal para a interface do Streamlit
def run_simulation():
    st.title("Simulador de PropagaÃ§Ã£o de Fake News - Modelo de Ising")

    # Inputs do usuÃ¡rio
    fake_news_name = st.text_input("Nome da Fake News", "Fake News")
    grid_size = st.slider("Tamanho da grade", min_value=10, max_value=50, value=20)
    num_influencers = st.slider("NÃºmero de Influenciadores", min_value=1, max_value=10, value=2)
    num_wise = st.slider("NÃºmero de SÃ¡bios", min_value=1, max_value=10, value=3)
    temperature = st.slider("Temperatura", min_value=0.1, max_value=5.0, value=2.0)

    # Criar o botÃ£o de iniciar simulaÃ§Ã£o
    start_button = st.button("Iniciar SimulaÃ§Ã£o")

    if start_button:
        # Inicializar o modelo com os parÃ¢metros escolhidos
        model = FakeNewsIsingModel(
            grid_size=grid_size,
            num_influencers=num_influencers,
            num_wise=num_wise,
            temperature=temperature,
            fake_news_name=fake_news_name
        )

        # Criar o grÃ¡fico da grade inicial
        fig, ax = plt.subplots(figsize=(5, 5))
        ax.set_axis_off()  # Oculta os eixos
        model.plot_grid(0, ax)
        st.pyplot(fig)

        # Barra de carregamento para iteraÃ§Ã£o
        progress_bar = st.progress(0)

        # Loop de iteraÃ§Ã£o
        for iteration in range(100):
            model.update_state()  # Atualiza o estado do modelo
            model.calculate_credibility()  # Calcula a credibilidade

            progress_bar.progress((iteration + 1) / 100)

            # Intervalo de atualizaÃ§Ã£o para dar tempo ao grÃ¡fico
            time.sleep(0.1)

        # Exibir a tela final com o grÃ¡fico de credibilidade
        st.subheader(f"Credibilidade da Fake News ({fake_news_name}) ao Longo do Tempo")
        st.line_chart(model.credibility_history)  # Exibe o grÃ¡fico final de credibilidade

        # Exibir a grade final (apÃ³s simulaÃ§Ã£o)
        fig, ax = plt.subplots(figsize=(5, 5))
        ax.set_axis_off()
        model.plot_grid(100, ax)
        st.pyplot(fig)

# ConfiguraÃ§Ã£o da pÃ¡gina e abas
st.set_page_config(page_title="SimulaÃ§Ã£o de Fake News", layout="wide")

# Aba principal
tab1, tab2 = st.tabs(["SimulaÃ§Ã£o", "Sobre"])

with tab1:
    run_simulation()

with tab2:
    st.header("Sobre o Modelo")
    st.markdown("""
    Este simulador utiliza uma versÃ£o modificada do **Modelo de Ising**, tradicionalmente utilizado em fÃ­sica para simular ferromagnetismo. 
    Foi desenvolvido por alunos do quarto semestre da Ilum Escola de CiÃªncia.

    ### ModificaÃ§Ãµes do modelo:
    - **Spins (-1, 0, 1)** representam:
      - `-1`: Pessoas que acreditam na fake news.
      - `0`: Pessoas neutras.
      - `1`: Pessoas que nÃ£o acreditam.
    - **Influenciadores (â˜…)** tÃªm maior peso na influÃªncia de vizinhos.
    - **SÃ¡bios (ðŸ’¡)** nunca acreditam na fake news - sÃ£o os experts

    ### ParÃ¢metros ajustÃ¡veis:
    - **Temperatura**: Controla a probabilidade de mudanÃ§as de estado.
    - **Influenciadores e sÃ¡bios**: Afetam a dinÃ¢mica local do modelo.

    Ajustar os parÃ¢metros Ã© essencial para modelar a propagaÃ§Ã£o de fake news de maneira mais personalizada. Por exemplo, os sÃ¡bios podem ser vistos como especialistas. Sendo assim, assuntos mÃ©dicos como vacinas terÃ£o mais sÃ¡bios que assuntos obscuros, como "pinguins extraterrestres que invadiram o planeta hÃ¡ duas eras geolÃ³gicas atrÃ¡s".  
    Sinta-se Ã  vontade para ajustar os parÃ¢metros e observar os efeitos na propagaÃ§Ã£o de crenÃ§as!
    """)
